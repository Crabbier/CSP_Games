package org.example.csp_games;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.*;

//import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.exceptions.UnirestException;

public class APIConnection {
    // General function to make the calls to the API
    public static String fetchData(String url, String bodyQuery) throws IOException, InterruptedException, UnirestException {

        String ClientID = "cqqswoyif9ydg06bj9pd93hwfawren";
        String Authorization = "Bearer 64ww9p2q64bcksqwntkfulkwm9g9xt";

//      Initiate HttpCLient
        HttpClient client = HttpClient.newHttpClient();

//      Send request to the API using the URL, ClientID and the Token generated by the API
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Client-ID", ClientID)
                .header("Authorization", Authorization)
                .header("Accept", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(bodyQuery))
                .build();


        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
//      return the response body as a string
        return response.body();
    }

    private static String getStringOrNull(JsonObject jsonObject, String fieldName) {
        JsonElement element = jsonObject.get(fieldName);
        return element != null && !element.isJsonNull() ? element.getAsString() : "";
    }

    public static List<GamesGenres> getGenres() {
        String urlData = "https://api.igdb.com/v4/genres/";
        String body = "fields name; limit 36;";
        String[] data = {urlData, body};
        List<GamesGenres> genresList = new ArrayList<>();

        try {
        String response = fetchData(urlData, body);
        if(response != null && !response.trim().isEmpty()) {
            JsonArray jsonArray = JsonParser.parseString(response).getAsJsonArray();
            for (JsonElement element:jsonArray) {
                JsonObject genre = element.getAsJsonObject();
                int id = Integer.parseInt(getStringOrNull(genre, "id"));
                String name = getStringOrNull(genre, "name");

                GamesGenres genre01 = new GamesGenres(id, name);
                genresList.add(genre01);
            }

            return genresList;
        }

        } catch (IOException | InterruptedException | UnirestException exception) {
            System.out.println(exception);
        }

        return null;
    }

    public static List<GamesTitles> getAllGames(String genre) {
        // API URL to get games info
        String urlData = "https://api.igdb.com/v4/games/";
        // Body query to filter the information needed from the database
        String body = "fields id, name; where genres.name=\""+ genre +"\" ; limit 200;";

        String[] data = {urlData, body};
        List<GamesTitles> gamesList = new ArrayList<>();

        try {
            // Call fetchData
            String response = fetchData(urlData, body);
            if(response != null && !response.trim().isEmpty()) {
                JsonArray jsonArray = JsonParser.parseString(response).getAsJsonArray();
                for (JsonElement element:jsonArray) {
                    JsonObject gameTitle = element.getAsJsonObject();
                    int id = Integer.parseInt(getStringOrNull(gameTitle, "id"));
                    String name = getStringOrNull(gameTitle, "name");
                    GamesTitles title01 = new GamesTitles(id, name);
                    gamesList.add(title01);
                }
                return gamesList;
            }

        } catch (IOException | InterruptedException | UnirestException exception) {
            System.out.println(exception);
        }

        return null;

    }

    public static List<GamesTitles> getAllGamesByWord(String searchWord) {
        String urlData = "https://api.igdb.com/v4/games/";
        String body = "fields id, name; search \"" +searchWord+ "\" ; limit 200;";
        List<GamesTitles> gamesList = new ArrayList<>();

        try {
            String response = fetchData(urlData, body);
            int count=1;
            if(response != null && !response.trim().isEmpty()) {
                JsonArray jsonArray = JsonParser.parseString(response).getAsJsonArray();
                for (JsonElement element:jsonArray) {
                    JsonObject gameTitle = element.getAsJsonObject();
                    int id = Integer.parseInt(getStringOrNull(gameTitle, "id"));
                    String name = getStringOrNull(gameTitle, "name");

                    GamesTitles title01 = new GamesTitles(id, name);
                    gamesList.add(title01);

                    count++;

                }

                return gamesList;
            }

        } catch (IOException | InterruptedException | UnirestException exception) {
            System.out.println(exception);
        }

        return null;

    }

    public static GamesDetails getGameDetails(int gameId) {
        String urlData = "https://api.igdb.com/v4/games/";
        String body = "fields id, name, slug, storyline, summary, url; where id="+gameId+";";
        List<GamesDetails> gamesList = new ArrayList<>();

        try {
            String response = fetchData(urlData, body);
            if(response != null && !response.trim().isEmpty()) {
                JsonArray jsonArray = JsonParser.parseString(response).getAsJsonArray();
                for (JsonElement element:jsonArray) {
                    JsonObject game = element.getAsJsonObject();
                    int id = Integer.parseInt(getStringOrNull(game, "id"));
                    String name = getStringOrNull(game, "name");
                    String slug = getStringOrNull(game, "slug");
                    String storyLine = getStringOrNull(game, "storyline");
                    String summary = getStringOrNull(game, "summary");
                    String url = getStringOrNull(game, "url");

                    String image = getGameCover(id);

                        GamesDetails game01 = new GamesDetails(id, name, slug, storyLine, summary, url, image);
                        gamesList.add(game01);
                    System.out.println(game01);
                    return game01;

                }

//                return game01;
            }

        } catch (IOException | InterruptedException | UnirestException exception) {
            System.out.println(exception);
        }

        return null;

    }

    public static String getGameCover(int gameID) {
        String imageUrl = "https://images.igdb.com/igdb/image/upload/t_1080p/";
        String urlData = "https://api.igdb.com/v4/covers/";
        String body = "fields game, image_id; where game=" + gameID + "; limit 1;";
        List<GamesImages> images = new ArrayList<>();

        try {
            String response = fetchData(urlData, body);
            if(response != null && !response.trim().isEmpty()) {
                JsonArray jsonArray = JsonParser.parseString(response).getAsJsonArray();
                for (JsonElement element:jsonArray) {
                    JsonObject image = element.getAsJsonObject();
//                    int id = Integer.parseInt(getStringOrNull(image, "id"));
//                    int gameId = Integer.parseInt(getStringOrNull(image, "game"));
                    String imageId = getStringOrNull(image, "image_id");
                    if (imageId != null) {
                        System.out.println(imageUrl + imageId + ".jpg");
                        return imageUrl + imageId + ".jpg";
                    } else {
                        System.out.println(imageUrl + "nocover.jpg");
                        return imageUrl + "nocover.jpg";
                    }

                }


            }

        } catch (IOException | InterruptedException | UnirestException exception) {
            System.out.println(exception);
        }

        return null;
    }
}
